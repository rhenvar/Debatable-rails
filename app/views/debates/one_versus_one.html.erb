<script type="text/javascript" src="https://static.opentok.com/v2/js/opentok.min.js"></script>
<div id="ownerBox"></div>
<div id="competitorBox"></div>
<div id="moderatorBox"></div>
<>
<%= 'ONE V ONE VIEW' %>

<%= javascript_tag do %>

var apiKey = '45241592';
var sessionId = "<%= j @debate.tok_session_id %>";
var token = "<%= j @tok_token %>";
var debateId = "<%= j @debate.id.to_s %>";
var debateSize = "<%= j @debate.size.to_s %>";
var userId = "<%= j @user.id.to_s %>";

var isDebater = "<%= @debater %>";
var isModerator = String("<%= @moderator %>");
var isOwner = "<%= @owner %>";

var session;
var connected = 1;

TB.setLogLevel(TB.DEBUG);
var session = TB.initSession(sessionId);
session.addEventListener('sessionConnected', sessionConnectedHandler);
session.addEventListener('streamCreated', streamCreatedHandler);
session.addEventListener('streamDestroyed', streamDestroyedHandler);
session.connect(apiKey, token);

var publisher;
function sessionConnectedHandler(event) {
  if (isModerator == "true") {
    publisher = TB.initPublisher(apiKey, 'moderatorBox');
    session.publish(publisher);
  }
  else if (isOwner == "true") {
    publisher = TB.initPublisher(apiKey, 'ownerBox');
    session.publish(publisher);
  }
  else if (isDebater == "true") {
    publisher = TB.initPublisher(apiKey, 'competitorBox');
    session.publish(publisher);
  }
  // Subscribe to streams that were in the session when we connected
  subscribeToStreams(event.streams);
}

function streamCreatedHandler(event) {
    subscribeToStreams(event.streams);
}

function subscribeToStreams(streams) {
  for (var i = 0; i < streams.length; i++) {
    // Make sure we donâ€™t subscribe to ourself
    if (streams[i].connection.connectionId == session.connection.connectionId) {
      return;
    }

    // Create the div to put the subscriber element in to
    var div = document.createElement('div');
    div.setAttribute('id', 'stream' + streams[i].streamId);
    if (streams[i].connection.data == "owner") {
      document.getElementById('ownerBox').appendChild(div);
    }
    else if (streams[i].connection.data == "debater") {
      document.getElementById('competitorBox').appendChild(div);
    }
    else if (streams[i].connection.data == "moderator") {
      document.getElementById('moderatorBox').appendChild(div);
    }
    // Subscribe to the stream
    session.subscribe(streams[i], div.id);
  }
}

function streamDestroyedHandler(event) {
  connected--;
}

function sendSignal() {
  session.signal({
     type: "foo",
     data: "hello"
     },
     function(error) {
     	if (error) {
          alert("error " + error.message);
     	} else {
     	  alert("sent");
     	}
     });
}

session.on("signal", function(event) {
     alert("Signal Sent from connection: " + event.id);
     alert("Signal Data " + event.data);
});

<% end %>
