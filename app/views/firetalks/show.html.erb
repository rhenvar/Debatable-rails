<script type="text/javascript" src="https://static.opentok.com/v2/js/opentok.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
<script src='http://code.jquery.com/jquery-<version>[.min].js'></script>
<%= javascript_include_tag "fade" %>


<div class="section" id="toppad">


  <!--======DESKTOP VIEW======-->
  <div class="col span_10_of_10" id="center-col">
    <div class="center-col-shadow">
    <div class="section">
      <div class="section firetalk-title centerhor">
        <h3>
          <%= @firetalk.name %>
        </h3>

      </div>
    </div>
<div class="section">
    <div class="start-ft">
    <% if @user.id == @firetalk.user_id %>
    <button id="startFiretalk" class="button">
      Start Firetalk
    </button>
    <% end %>
  </div>
</div>

  <div class="center-vids">
      <div class="col  full-ft-speaker-box">
        <div class="section">
          <div id="speaker1Box" class="speakerBox">
          </div>
        </div>

        <div class="section progressbar" id="speaker1Progressbar"></div>

        <div class="section speaker-options-container">
          <div class="speaker-options">

            <div class="user-name-ft" id="speaker1Name">
            <%= @users[0].firstname %>
          </div>

<div class="vote-options">
  <div class="speakerPoints-container">
            <div id="speaker1Points" class="speakerPoints">
                0
              </div>
            </div>
<div class="upvotebutton-container" id="upvote-bounce1">
              <%= image_tag("upvotebutton.svg", :class => "upvotebutton")%>
            </div>
          </div>
        </div>
          </div>
        </div>

      <div class="col full-ft-speaker-box">
        <div class="section">
          <div id="speaker2Box" class="speakerBox">
          </div>
        </div>
        <div class="section progressbar" id="speaker2Progressbar"></div>

        <div class="section speaker-options-container">
          <div class="speaker-options">
            <div class="user-name-ft" id="speaker2Name">
            <%= @users[1].firstname %>
          </div>


          <div class="vote-options">
            <div class="speakerPoints-container">
                      <div id="speaker2Points" class="speakerPoints">
                          0
                        </div>
                      </div>
          <div class="upvotebutton-container" id="upvote-bounce2">
                        <%= image_tag("upvotebutton.svg", :class => "upvotebutton")%>
                      </div>
                    </div>
          </div>
        </div>
      </div>


      <div class="col full-ft-speaker-box mobile-vid-row">

        <div class="section">
          <div id="speaker3Box" class="speakerBox">
          </div>
        </div>
        <div class="section progressbar" id="speaker3Progressbar"></div>

        <div class="section speaker-options-container">
          <div class="speaker-options">
            <div class="user-name-ft" id="speaker3Name">
              <%= @users[2].firstname %>
          </div>


          <div class="vote-options">
            <div class="speakerPoints-container">
                      <div id="speaker3Points" class="speakerPoints">
                          0
                        </div>
                      </div>
          <div class="upvotebutton-container" id="upvote-bounce3">
                        <%= image_tag("upvotebutton.svg", :class => "upvotebutton")%>
                      </div>
                    </div>
          </div>
        </div>
      </div>

      <div class="col full-ft-speaker-box">
        <div class="section">
          <div id="speaker4Box" class="speakerBox">
          </div>
        </div>
        <div class="section progressbar" id="speaker4Progressbar"></div>

        <div class="section speaker-options-container">
          <div class="speaker-options">
            <div class="user-name-ft" id="speaker4Name">
            <%= #@users[3].firstname %>
          </div>


          <div class="vote-options">
            <div class="speakerPoints-container">
                      <div id="speaker4Points" class="speakerPoints">
                          0
                        </div>
                      </div>
          <div class="upvotebutton-container" id="upvote-bounce4">
                        <%= image_tag("upvotebutton.svg", :class => "upvotebutton")%>
                      </div>
                    </div>
          </div>
        </div>
      </div>
      <div class="col full-ft-speaker-box">

        <div class="section">
          <div id="speaker5Box" class="speakerBox">
          </div>
        </div>
        <div class="section progressbar" id="speaker5Progressbar"></div>

        <div class="section speaker-options-container">
          <div class="speaker-options">
            <div class="user-name-ft" id="speaker5Name">
            <%= @users[4].firstname %>
          </div>


          <div class="vote-options">
            <div class="speakerPoints-container">
                      <div id="speaker5Points" class="speakerPoints">
                          0
                        </div>
                      </div>
          <div class="upvotebutton-container" id="upvote-bounce5">
                        <%= image_tag("upvotebutton.svg", :class => "upvotebutton")%>
                      </div>
                    </div>
          </div>
        </div>
      </div>
      <div class="col full-ft-speaker-box">

        <div class="section">
          <div id="speaker6Box" class="speakerBox">
          </div>
        </div>
        <div class="section progressbar" id="speaker6Progressbar"></div>

        <div class="section speaker-options-container">
          <div class="speaker-options">
            <div class="user-name-ft" id="speaker6Name">
            <%= @users[5].firstname %>
          </div>


          <div class="vote-options">
            <div class="speakerPoints-container">
                      <div id="speaker6Points" class="speakerPoints">
                          0
                        </div>
                      </div>
          <div class="upvotebutton-container" id="upvote-bounce6">
                        <%= image_tag("upvotebutton.svg", :class => "upvotebutton")%>
                      </div>
                    </div>
          </div>
        </div>

      </div>
    </div>




        <div class="section firetalktopbar-container">
          <div class="float-left rounds-left">
        <span class="rounds-left">Round:</span>
        <span id="roundNumber" class="">
          1
        </span>
      </div>

      <h4 class="time-center">
        <span class="">
          Time:
        </span>
        <span id="clock">
          60
        </span>
      </h4>

      <div class="float-right votes-left">
        <span class="">Your Votes Left:</span>
        <span id="pointsLeft" class="">
          0
        </span>
      </div>
    </div>


        <div class="ft-info-container">
          <div class="firetalk-info">
            <h3><em><%= @firetalk.topic %></em></h3>
            <em><%= @firetalk.description %></em>
            </br></br>
            participants:
          </br>
            <%= @users[0].firstname %>
          </br>
            <%= @users[1].firstname %>
          </br>
            <%= @users[2].firstname %>
          </br>
            <%= @users[3].firstname %>
          </div>
        </div>
  </div>


</div>






</div>





<!================================-->

<!LOCAL JAVASCRIPT-->

<!================================-->


<%= javascript_tag do %>

var pointsLeft = 5;
var apiKey = '45241592';
var sessionId = "<%= j @firetalk.tok_session_id %>";
var token = "<%= j @tok_token %>";
var myEmail = "<%= j @user.email %>"
var debatersJson = JSON.parse("<%= j @firetalk_json.to_s.html_safe %>");
var isDebater = "<%= @is_debater %>"
var firetalkGoing = false;
var playersAlive = [];

// connecting logic
TB.setLogLevel(TB.DEBUG);
var session = TB.initSession(sessionId);
var totalSessions = [];


var totalPoints = $('.speakerPoints');
for (var i = 0; i < totalPoints.length; i++) {
  totalPoints[i].style.visibility = "hidden";
}

session.addEventListener('sessionConnected', sessionConnectedHandler);
session.addEventListener('streamCreated', streamCreatedHandler);
session.addEventListener('streamPropertyChanged', streamPropertyChangedHandler)
session.connect(apiKey, token);

var publisher;
var speakerNumber;
var publisherOptions = {width: '100%', height: '100%'};

function sessionConnectedHandler(event) {
  var myDiv = document.createElement('div');
  speakerNumber = parseInt(debatersJson[myEmail] + 1);
  publisher = OT.initPublisher(apiKey, myDiv, publisherOptions);
  document.getElementById("speaker" + speakerNumber + "Box").appendChild(myDiv);
  if (isDebater) {
    session.publish(publisher);
  }
  var id = document.createTextNode(String(session.connection.connectionId));
  document.body.appendChild(id);

  // Subscribe to streams that were in the session when we connected
  subscribeToStreams(event.streams);
}

function streamCreatedHandler(event) {
    subscribeToStreams(event.streams);
}

var options = {height: "100%", width: "100%"}

function subscribeToStreams(streams) {
  for (var i = 0; i < streams.length; i++) {
    // Make sure we donâ€™t subscribe to ourself
    if (streams[i].connection.connectionId == session.connection.connectionId) {
      return;
    }
    // Create the div to put the subscriber element in to
    var div = document.createElement('div');
    div.setAttribute('id', 'stream' + streams[i].streamId);

    var connection = streams[i].connection;
    var email = connection.data.split("|")[1];
    var newSpeakerNumber = parseInt(debatersJson[email]) + 1;
    document.getElementById("speaker" + newSpeakerNumber + "Box").appendChild(div);

    // Subscribe to the stream
    session.subscribe(streams[i], div.id, options);
  }
}

function streamPropertyChangedHandler() {
}

function decrementVote() {
  var points = document.getElementById("pointsLeft");
  var left = points.innerHTML;
  points.innerHTML = parseInt(left) - 1;
}

function getPoints() {
  return parseInt(document.getElementById('pointsLeft').innerHTML);
}

// BROADCAST SIGNAL EVENTS
$('#upvote-bounce1').click(function() {
  if (hasPointsLeft() && speakerNumber != 1) {
    decrementVote();
    session.signal(
      {
        data: totalSessions[0].connection.connectionId,
        type: "voteSpeakerOne"
      },
      function(error) {
        if (error) {
          alert(error.message);
        }
      }
    );
  }
});

$('#upvote-bounce2').click(function() {
  if (hasPointsLeft() && speakerNumber != 2) {
    session.signal(
      {
        data:  totalSessions[1].connection.connectionId,
        type: "voteSpeakerTwo"
      },
      function(error) {
        if (error) {
          alert(error.message);
        }
      }
    );
    decrementVote();
  }
});

$('#upvote-bounce3').click(function() {
  if (hasPointsLeft() && speakerNumber != 3) {
    session.signal(
      {
        data:  totalSessions[2].connection.connectionId,
        type: "voteSpeakerThree"
      },
      function(error) {
        if (error) {
          alert(error.message);
        }
      }
    );
    decrementVote();
  }
});

$('#upvote-bounce4').click(function() {
  if (hasPointsLeft() && speakerNumber != 4) {
    session.signal(
      {
        data:  totalSessions[3].connection.connectionId,
        type: "voteSpeakerFour"
      },
      function(error) {
        if (error) {
          alert(error.message);
        }
      }
    );
    decrementVote();
  }
});

$('#upvote-bounce5').click(function() {
  if (hasPointsLeft() && speakerNumber != 5) {
    session.signal(
      {
        data:  totalSessions[4].connection.connectionId,
        type: "voteSpeakerFive"
      },
      function(error) {
        if (error) {
          alert(error.message);
        }
      }
    );
    decrementVote();
  }
});

$('#upvote-bounce6').click(function() {
  if (hasPointsLeft() && speakerNumber != 6) {
    session.signal(
      {
        data:  totalSessions[5].connection.connectionId,
        type: "voteSpeakerSix"
      },
      function(error) {
        if (error) {
          alert(error.message);
        }
      }
    );
    decrementVote();
  }
});

function hasPointsLeft() {
  var points = parseInt(document.getElementById("pointsLeft").innerHTML);
  return points > 0;
}

// LISTENER EVENTS
session.on(
  "signal:winnerColor", function(event) {
    var email;
    for (var i = 0; i < totalSessions.length; i++) {
      if (totalSessions[i].connection.connectionId == event.data) {
        email = totalSessions[i].connection.data.split("|")[1];
      }
    }
    speakerIndex = parseInt(debatersJson[email]) + 1;
    //document.getElementById('speaker' + speakerIndex + 'Box').style.border = "4px solid #ffff33";
    document.getElementById('speaker' + speakerIndex + 'Progressbar').style.backgroundColor = "yellow";
    document.getElementById("pointsLeft").innerHTML = "0";
    var winnerBox = document.createElement("div");
    var winnerName = document.getElementById("speaker" + speakerIndex + "Name").innerHTML;
    winnerBox.style.fontSize = "48pt";
    winnerBox.style.textAlign = "center";
    winnerBox.innerHTML = winnerName + " has won the firetalk!";
    $(".firetalktopbar-container").prepend(winnerBox);
  }
);
session.on(
  "signal:decrementVote", function(event) {
    document.getElementById('pointsLeft').innerHTML = event.data;
  }
);

// Listener SpeakerOneUpvote
session.on(
  "signal:voteSpeakerOne", function(event) {
    var newPoints = incrementStream(event.data);
    $('#speaker1Points').html(newPoints);
  }
);

// Listener SpeakerTwoUpvote
session.on(
  "signal:voteSpeakerTwo", function(event) {
    var newPoints = incrementStream(event.data);
    $('#speaker2Points').html(newPoints);
  }
);

session.on(
  "signal:voteSpeakerThree", function(event) {
    var newPoints = incrementStream(event.data);
    $('#speaker3Points').html(newPoints);
  }
);

session.on(
  "signal:voteSpeakerFour", function(event) {
    var newPoints = incrementStream(event.data);
    $('#speaker4Points').html(newPoints);
  }
);

session.on(
  "signal:voteSpeakerFive", function(event) {
    var newPoints = incrementStream(event.data);
    $('#speaker5Points').html(newPoints);
  }
);

session.on(
  "signal:voteSpeakerSix", function(event) {
    var newPoints = incrementStream(event.data);
    $('#speaker6Points').html(newPoints);
  }
);

session.on(
  "signal:catchUpPoints", function(event) {
    var mostRecentPoints = event.data.split("|");
    var zeroPoints = $(".speakerPoints");

    for (var i = 0; i < mostRecentPoints.length; i++) {
      zeroPoints[i].innerHTML = mostRecentPoints[i];

      var conn = totalSessions[i].connection;
      if (conn) {
        conn.data = mostRecentPoints[i] + "|" + conn.data.split("|")[1];
      }
    }
    /*
    $('.speakerPoints').each(function(index) {
      var newPoint = mostRecentPoints[index];
      $(this).html(newPoint);
    });
    */
    /*
    for (var i = 0; i < mostRecentPoints.length; i++) {
      points[i].html(mostRecentPoints[i]);
    }
    */
  }
);

// Stores the points of the connection locally and returns the value
function incrementStream(connectionId) {
  for (var i = 0; i < totalSessions.length; i++) {
    if (String(totalSessions[i].connection.connectionId) == String(connectionId)) {
      var data = totalSessions[i].connection.data.split("|");
      totalSessions[i].connection.data = parseInt(data[0]) + 1 + "|" + data[1];
      return parseInt(data[0]) + 1;
    }
  }
  return 0;
}

// Get whoever connected and add to list
session.on(
  "connectionCreated", function(event) {
    var emailAndPoints = event.connection.data.split("|");

    // JSON points email => Speaker number
    // totalSessions puts people in the right order by speaker number

    // RECONNECTING LOGIC
    var newSession = event;

    if (firetalkGoing) {

      var pointsString = "";
      for (var i = 0; i < totalSessions.length; i++) {
        pointsString += totalSessions[i].connection.data.split("|")[0] + "|";
      }
      var index = parseInt(debatersJson[emailAndPoints[1]]);
      if (playersAlive[index] != null) {
        playersAlive[index] = newSession.connection.connectionId;
        showPoints();
      }
      // update their points
      session.signal({
          type: "catchUpPoints",
          to: newSession.connection,
          data: pointsString
        }, function(error) {
          if (error) {
            alert("could not tell player to reset points!" + error.message + error.code);
          }
        }
      );
    }
    totalSessions[parseInt(debatersJson[emailAndPoints[1]])] = newSession;
  }
);

function showPoints() {
  session.signal({
    type: "showPoints"
  }, function(error) {
    if (error) {
      alert("couldn't show points");
    }
  });
}

// Listen to ourselves if we lose
session.on(
  "signal:disconnect", function(event) {
    if (session.connection.connectionId == event.data) {
      // Instead of just unpublishing, permanently mute and set style to black
      publisher.publishAudio(false);
    //  document.getElementById('speaker' + speakerNumber + 'Progressbar').style.backgroundColor = "red";

      session.signal({
        type: 'dropColor',
        data: session.connection.connectionId
        }, function(error) {
          if (error) {
            console.log("problem changing colors");
          }
        }
      );
      session.signal({
        type: 'hideLoserButton',
        data: speakerNumber
        }, function(error) {
          if (error) {
            console.log("problem hiding button");
          }
        }
      );
    }
  }
);

session.on(
  "signal:hideLoserButton", function(event) {
    var loserNumber = parseInt(event.data);
    $('#upvote-bounce' + loserNumber).unbind();
    $('#upvote-bounce' + loserNumber).fadeOut(400);
    $('#speaker' + loserNumber + 'Points').hide(400);
  }
);


session.on(
  "signal:dropColor", function(event) {
    var email;
    for (var i = 0; i < totalSessions.length; i++) {
      if (totalSessions[i].connection.connectionId == event.data) {
        email = totalSessions[i].connection.data.split("|")[1];
      }
    }
    var debaterIndex = parseInt(debatersJson[email]) + 1;
    document.getElementById('speaker' + debaterIndex + 'Progressbar').style.backgroundColor = "red";
    var loserVideoBox = $("#speaker" + debaterIndex + "Box");
    var outDiv = document.createElement("div");
    outDiv.setAttribute("id", "out");
    outDiv.style.color = "red";
    outDiv.style.fontSize = "40pt";
    outDiv.style.position = "absolute";
    outDiv.style.zIndex = "1000";
    outDiv.innerHTML = "Out!";
    loserVideoBox.prepend(outDiv);
    $("#out").fadeOut(4000, function() {
      $(this).remove();
    });
  }
);

session.on(
  "signal:decrementClock", function(event) {
    var currentTimeElement = $('#clock');
    var currentTime = parseInt(currentTimeElement.innerHTML);
    if (currentTime <= 5) {
      // make the background fade?
      var redBackground = document.createElement("div");

    }
    currentTimeElement.html(event.data);
});

session.on(
  "signal:resetTimer", function(event) {
  $('#clock').html("60");
});

session.on(
  "signal:adjustAudio", function(event) {
    var email;
    for (var i = 0; i < totalSessions.length; i++) {
      if (totalSessions[i].connection.connectionId == event.data) {
        email = totalSessions[i].connection.data.split("|")[1];
      }
    }
    var nowSpeaking = parseInt(debatersJson[email]);
    var totalSpeakerBars = $('.progressbar');
    for (var i = 0; i < totalSpeakerBars.length; i++) {
      if (i == nowSpeaking) {
        //totalSpeakerBars[i].style.backgroundColor = "green";
        //startLoadingBar(i + 1);
        startLoadingBar(i + 1);
      }

      //else if (totalSpeakerBoxes[i].style.backgroundColor != "rgb(0, 0, 0)"){
      else if (totalSpeakerBars[i].style.backgroundColor != "red") {
        //if (totalSpeakerBoxes[i].style.borderColor != '#000000') {
        totalSpeakerBars[i].style.backgroundColor = "gray";
      }
    }
    // Don't worry about this, it's just muting stuff
    if (event.data == session.connection.connectionId) {

      //$("#speaker" + speakerNumber + "Box").css("border", "4px solid green");

      //$("#speaker" + speakerNumber + "Box").css("background-color", "green");
      publisher.publishAudio(true);
    }
    else {
      publisher.publishAudio(false);
    }
  }
);

function startLoadingBar(speakerIndex) {
  var barTimer = null;
  var speakerBar = document.getElementById("speaker" + speakerIndex + "Progressbar");
  speakerBar.style.backgroundColor = "gray";
  var timeLeftBar = document.createElement("div");
  timeLeftBar.setAttribute("id", "tickingBar");
  timeLeftBar.style.width = speakerBar.style.width;
  timeLeftBar.style.height = "8px";
  timeLeftBar.style.backgroundColor = "green";
  timeLeftBar.style.float = "right";
  speakerBar.appendChild(timeLeftBar);

  var total = 100;
  seconds = 60;


  // interval = total seconds * 10 / 2 (or 3 or 4 depending on how far we wanna go)
  var interval = 150;
  barTimer = setInterval(decrementBar, interval);
  function decrementBar() {
    //this will be a function of time??
    var currentTime = parseInt($('#clock').text(), 10);

    if (currentTime == 25) {
      // 100, 100 = 10 sec total
      // green to yellow
      colorFade("tickingBar", "background", "00cc00", "ffff00", 200, 15);
    }
    else if (currentTime == 12) {
      // yellow to red
      colorFade("tickingBar", "background", "ffff00", "ff0000", 100, 60);

    }

    // correct for network lag?
    if (currentTime == seconds / 2) {
      total = 50;
    }
    else if (currentTime == Math.round(seconds / 4)) {
      total = 25;
    }

    if (currentTime == 0 || total == 0) {
      speakerBar.removeChild(timeLeftBar);
      clearInterval(barTimer);
      barTimer = null;
    }
    else {
      timeLeftBar.style.width = total + "%";
      total -= 0.333;
    }
  }
}

session.on(
  "signal:nextRound", function(event) {
    var array = event.data.split(",");
    var currentRound = $('#roundNumber');
    currentRound.html(array[0]);

    // reset the people who are still competing's points to 0
    for (var i = 0; i < array.length; i++) {
      for (var j = 0; j < totalSessions.length; j++) {
        var connection = totalSessions[j].connection;
        if (array[i] == connection.connectionId) {
          data = connection.data.split("|");
          email = data[1];
          speakerIndex = parseInt(debatersJson[email]) + 1;
          $('#speaker' + speakerIndex + 'Points').html(0);
          connection.data = 0 + "|" + email;
        }
      }
    }
  }
);

session.on(
  "signal:removeButtons", function(event) {
    var myIndex = parseInt(debatersJson[myEmail]);
    $('button.OT_edge-bar-item.OT_mute.OT_mode-auto').each(function(index) {
      if (myIndex == index) {
        $(this).hide();
      }
    });
  }
);

session.on(
  "signal:unmuteAll", function(event) {
    publisher.publishAudio(true);
  }
);

session.on(
  "signal:showPoints", function(event) {
    var points = $('.speakerPoints');
    for (var i = 0; i < points.length; i++) {
      points[i].style.visibility = 'visible';
    }
  }
);

session.on(
  "signal:newPoints", function(event) {
    var newPoints = parseInt(event.data);
    document.getElementById("pointsLeft").innerHTML = newPoints;
  }
);

session.on(
  "signal:prepareNextSpeaker", function(event) {
    var speakerIndex = parseInt(event.data) + 1;

    // do something that takes 10 seconds
    //colorFade("speaker" + speakerIndex + "Progressbar", 'background', 'gray', 'yellow', 25, 10);
    var blinkTimer = null;
    var times = 6;
    blinkTimer = setInterval(alertPlayer, 1000);
    var speakerBar = document.getElementById("speaker" + speakerIndex + "Progressbar");
    var yellowBar = document.createElement("div");
    yellowBar.setAttribute("id", "yellowBlinkingBar");
    yellowBar.style.width = speakerBar.style.width;
    yellowBar.style.height = "8px";
    yellowBar.style.backgroundColor = "yellow";
    speakerBar.appendChild(yellowBar);


    function alertPlayer() {
      if (times == 0) {
        $('#yellowBlinkingBar').fadeOut(500, function() {
          $(this).remove();
        });
        clearInterval(blinkTimer);
        blinkTimer = null;
      }
      else {

        if (yellowBar.style.display == "") {
          $('#yellowBlinkingBar').fadeOut(500);
          //yellowBar.style.display = "none";
        }
        else {
          yellowBar.style.display = "";
        }
        times--;
      }
    }
  }
);

<% end %>

<% if session[:user_id].to_s == params[:user_id].to_s %>
  <%= javascript_tag do %>
  var currentSpeakerIndex = 0;
  window.onload = function() {
    $('#startFiretalk').on('click', function() {
      startFiretalk();
    });
  };

  function startFiretalk() {
    $('#startFiretalk').hide();
    firetalkGoing = true;
    session.signal({
      type: "newPoints",
      data: pointsLeft
    }, function(error) {
      if (error) {
        alert("failed to update voter points");
      }
    });
    showPoints();
    session.signal({
      type: "removeButtons"
      }, function(error) {
        if (error) {
          alert("couldn't tell people to fix buttons");
        }
    });

    // OWNER LOGIC (Clock every second, muting people, etc.)
    // WRAP IN START FUNCTION, EXECUTE ON CLICK

    // Players alive is an array containing the connectionIds of all debaters
    // throughout the firetalk we will nullify the connections that are dropped
    // each round, and keep track of the next speaker (connectionId) in line
    for (var i = 0; i < totalSessions.length; i++) {
      if (totalSessions[i]) {
        playersAlive[i] = totalSessions[i].connection.connectionId;
      }
    }

    // First person start
    session.signal({
      type: "adjustAudio",
      data: totalSessions[0].connection.connectionId
    },
    function(error) {
      if (error) {
        alert("There was an error starting the firetalk with owner");
      }
    });

    var timer = null;
    if (!timer) {
      timer = setInterval(clockwork, 1000);
    }

    var totalRounds = 6;
    var currentRound = 1;

    // Firetalk logic function
    // First speaker (owner) is ALREADY speaking when this method is called
    function clockwork() {
      // Clock logic
      var currentTimeLeft = parseInt($('#clock').text(), 10);

      // Timer Still going
      if (currentTimeLeft > 0) {
        var newTime = currentTimeLeft - 1;

        // Lets stick these in helper methods
        session.signal({
          data: newTime,
          type: "decrementClock"
        },
        function(error) {
          if (error) {
            alert("Failed to update clock, who knows");
          }
        });

        if (currentTimeLeft == 10) {
          // get next speaker speaking
          if (!isLastSpeakerAlive(currentSpeakerIndex)) {
            var nextSpeakerIndex = getNextSpeakerAlive(currentSpeakerIndex);
            //alert("Now: " + currentSpeakerIndex + " next:" + nextSpeakerIndex);

            session.signal({
              type: "prepareNextSpeaker",
              data: nextSpeakerIndex
            }, function(error) {
              if (error) {
                alert("couldn't prepare next speaker");
              }
            });
          }
          else {

          }
        }
      }
      // Timer Ended (30 seconds up!)
      else {
        // unmute next person, mute everyone else and reset clock to 30 sec (another signal func)
        // if the round is over (bool var?) disconnect the lowest session
        // if we've got a winner, stop everything
        session.signal({
          type: "resetTimer"
        }, function(error) {
          if (error) {
            alert("Failed to reset clock");
          }
        });

        // If we have reached the last speaker (a.k.a it's time for a new round)
        if (isLastSpeakerAlive(currentSpeakerIndex)) {
          // and drop the lowest dude
          currentRound++;
          dropLowest();
          // Go back to the beginning of our list at the end of the round
          currentSpeakerIndex = firstIndexAlive();

          // If it's the end of the firetalk
          if (currentRound == totalRounds) {
            //alert("END OF FIRETALK");
            session.signal({
              type: "unmuteAll"
            },  function(error) {
              if (error) {
                alert("failed to unmute all");
              }
            });
            // Do some winner logic

            var winningConnectionId = firstSpeakerAlive();
            session.signal({
              type: "winnerColor",
              data: winningConnectionId
            }, function(error) {
              if (error) {
                alert("couldn't set winner color");
              }
            });
            clearInterval(timer);
            timer = null;
          }
          else {
            // unmute first person in list
            session.signal({
              type: "adjustAudio",
              data: firstSpeakerAlive()
            }, function(error) {
                if (error) {
                  alert("cant send unmute ");
                }
            });
            session.signal({
              type: "nextRound",
              data: currentRound + "," + playersAlive.join()
            },
            function(error) {
              if (error) {
                alert("Failed to tell everyone to increment round...");
              }
            });
            session.signal({
              type: "newPoints",
              data: pointsLeft * 2
            }, function(error) {
              if (error) {
                alert("failed to update voter points");
              }
            });
            pointsLeft *= 2;
          }
        }
        // There are still more people left to speak (guaranteed)
        else {
          // unmute next speaker
          currentSpeakerIndex++;
          for (var i = currentSpeakerIndex; i < playersAlive.length; i++) {
            var connectionId = playersAlive[i];
            if (connectionId) {
              session.signal({
                type: "adjustAudio",
                data: connectionId
              }, function(error) {
                  if (error) {
                    alert("cant send unmute ");
                  }
              });
              currentSpeakerIndex = i;
              break;
            }
          }
        }
      }
    }

    function getNextSpeakerAlive(currentSpeaker) {
      for (var i = currentSpeaker; i < playersAlive.length; i++) {
        if (playersAlive[i + 1]) {
          return i + 1;
        }
      }
      for (var i = 0; i < currentSpeaker; i++) {
        if (playersAlive[i]) {
          return i;
        }
      }
    }

    // returns connectionId of the first speaker in the list
    function firstSpeakerAlive() {
      for (var i = 0; i < playersAlive.length; i++) {
        if (playersAlive[i] != null) {
          // here it's returning the incorrect connectionID because it didn't update properly...
          return playersAlive[i];
        }
      }
    }

    function firstIndexAlive() {
      for (var i = 0; i < playersAlive.length; i++) {
        if (playersAlive[i]) {
          return i;
        }
      }
    }

    // Checks if the given index is the last speaker alive
    // or that the rest of the elements after it are null
    function isLastSpeakerAlive(index) {
      if (index == 5) {
        return true;
      }
      for (var i = index + 1; i < playersAlive.length; i++) {
        if (playersAlive[i]) {
          return false;
        }
      }
      return true;
    }

    function lowestPointsIndex() {
      var lowestIndex = playersAlive.indexOf(firstSpeakerAlive());
      var lowestConnectionId = firstSpeakerAlive();
      var lowestConnection;
      for (var i = 0; i < totalSessions.length; i++) {
        if (totalSessions[i].connection.connectionId == lowestConnectionId) {
          lowestConnection = totalSessions[i].connection;
        }
      }
      for (var i = 0; i < playersAlive.length; i++) {
        if (playersAlive[i] != null) {
          var testConnection = totalSessions[i].connection;
          if (parseInt(testConnection.data.split("|")[0]) < parseInt(lowestConnection.data.split("|")[0])) {
            lowestIndex = i;
            lowestConnection = testConnection;
          }
        }
      }
      return lowestIndex;

      /*
      var alive = playersLeft();
      var aliveConnections = [];

      for (var i = 0; i < totalSessions.length; i++) {
        for (var j = 0; i < alive.length; j++) {
          if (totalSessions[i].connection.connectionId == alive[j]) {
            aliveConnections.push(totalSessions[i].connection);
          }
        }
      }

      var firstConnection = aliveConnections[0];
      var lowestIndex = 0;
      for (var i = 0; i < aliveConnections.length; i++) {
        var firstPoints = parseInt(firstConnection.data.split("|")[0]);
        var secondPoints = parseInt(aliveConnections[i].connection.data.split("|")[0]);
        if (secondPoints > firstPoints) {
          firstConnection = aliveConnections[i].connection;
        }
      }
      */
    }

    function playersLeft() {
      left = [];
      for (var i = 0; i < playersAlive.length; i++) {
        if (players[i]) {
          left.push(players[i]);
        }
      }
      return left;
    }

    function dropLowest() {
      var index = lowestPointsIndex();
      playersAlive[index] = null;
      var lowestConnection = totalSessions[index].connection;
      //alert("dropping " + lowestConnection.connectionId);
      session.signal(
        {
          type: "disconnect",
          data: lowestConnection.connectionId
        },
        function(error) {
          console.log("signal error");
        }
      );
    }
  }
  <% end %>

<% end %>
